[arduino]
port = "COM3"  # Порт, к которому подключена Arduino
baud = 9600  # Скорость обмена данными с Arduino в бодах

[camera]
rtsp_url = "rtsp://127.0.0.1:9192/h264_pcm.sdp"  # URL для подключения к IP-камере
width = 1280  # Ширина изображения с камеры в пикселях
height = 720  # Высота изображения с камеры в пикселях
use_file = true  # Использовать изображение из файла вместо камеры
file_path = "/home/timur/Projects/neurobot24/imgs/photo53.jpg"  # Путь к файлу изображения для тестирования

[debug]
enabled = true  # Включить режим отладки
save_images = true  # Сохранять промежуточные изображения
output_dir = "debug"  # Папка для сохранения отладочных изображений

[constants]
plane_width = 1200  # Ширина рабочей плоскости в миллиметрах
plane_height = 800  # Высота рабочей плоскости в миллиметрах
min_accur = 35  # Минимальная точность определения объектов в пикселях
square_hcounts = 4  # Количество квадратов по высоте на рабочей плоскости
square_wcounts = 6  # Количество квадратов по ширине на рабочей плоскости
size_plus = 120  # Размер плюса-мишени в миллиметрах
cross2square_k = 1.6  # 200 / 125
square_cm = 20  # Размер стороны квадрата в сантиметрах
pix_k = 1.6  # Коэффициент перевода пикселей в миллиметры
floor_plus = 29  # Расстояние от пола до центра плюса в сантиметрах
floor_bottom = 29  # Расстояние от пола до нижней границы рабочей плоскости в сантиметрах
cal_k = 11550  # Калибровочный коэффициент для определения расстояния

[color_ranges]
white = [ [ 0, 0, 180,], [ 255, 30, 255,],]  # Диапазон HSV для белого цвета
red = [ [ [ 0, 70, 50,], [ 97, 255, 255,],], [ [ 170, 70, 50,], [ 180, 255, 255,],],]  # Два диапазона HSV для красного цвета (из-за особенностей цветового круга)
blue = [ [ 100, 50, 50,], [ 130, 255, 255,],]  # Диапазон HSV для синего цвета
black = [ [ 0, 0, 0,], [ 255, 255, 70,],]  # Диапазон HSV для черного цвета

[haar_cascade]
filepath = "cascade2.xml"  # Путь к файлу каскада Хаара для распознавания плюса
scale_factor = 1.08  # Масштабный коэффициент для поиска объектов разного размера
min_neighbors = 8  # Минимальное количество соседей для подтверждения обнаружения
min_size = [ 20, 20,]  # Минимальный размер объекта для обнаружения
max_size = [ 255, 255,]  # Максимальный размер объекта для обнаружения

[image_processing]
brightness = 5  # Увеличение яркости изображения
contrast = 5  # Увеличение контрастности изображения
kernel_size = 3  # Размер ядра для морфологических операций

[circle_detection]
dp = 1.1  # Обратное разрешение аккумулятора для поиска кругов
min_dist_factor = 5  # Минимальное расстояние между центрами кругов (относительно размера квадрата)
param1 = 900  # Верхний порог для детектора границ Канни
param2 = 5  # Порог аккумулятора для определения кругов
min_radius_factor = 8.5  # Минимальный радиус круга (относительно размера квадрата)
max_radius_factor = 5.5  # Максимальный радиус круга (относительно размера квадрата)
